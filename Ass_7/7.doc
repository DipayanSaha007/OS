7a.c
	code-
		#include<stdio.h>
		#include<unistd.h>
		#include<signal.h>

		void sig_handler(int signum){
			signal(SIGINT,SIG_DFL);
			printf("\nSignal Number = %d\n",signum);
		}

		int main(){
			signal(SIGINT,sig_handler);
			for (int i=1;;i++){
				puts("Signal Handler\n");
				sleep(1);
			}
			return 0;
		}


	ss-
7b.c
code-
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <stdlib.h>

volatile sig_atomic_t signal_received = 0;

void sig_handler(int signum) {
    if (signum == SIGUSR1) {
        signal_received = 1; 
    }
}

int main() {
    pid_t pid;
    signal(SIGUSR1, sig_handler);

    pid = fork();
    if (pid < 0) {
        perror("fork");
        exit(EXIT_FAILURE);
    }
    if (pid == 0) {
        sleep(2); 
        printf("Child process (PID: %d) sending SIGUSR1 to parent process (PID: %d)\n", getpid(), getppid());
        kill(getppid(), SIGUSR1);  
        exit(EXIT_SUCCESS);
    } else {
        printf("Parent process (PID: %d) created.\n", getpid());
        printf("Parent process will print messages until it receives SIGUSR1.\n");

        while (!signal_received) {
            puts("Parent waiting for signal...");
            sleep(1);
        }
        printf("Received SIGUSR1 signal from child process. Exiting...\n");
        exit(EXIT_SUCCESS);
    }

    return 0;
}
ss-

7c.c
code-
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
int year;

int is_leap_year(int year) {
    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
}

void sig_handler(int signum) {
    if (signum == SIGUSR1) {
        if (is_leap_year(year)) {
            printf("Year %d is a leap year.\n", year);
        } else {
            printf("Year %d is not a leap year.\n", year);
        }
    }
}

int main() {
    pid_t pid;
    printf("Enter a year: ");
    scanf("%d", &year);
    signal(SIGUSR1, sig_handler);

    if ((pid = fork()) == 0) {
        while (1) {
            pause(); 
        }
    } else if (pid > 0) {
        while (1) {
            sleep(5);
            kill(pid, SIGUSR1); 
        }
    } else {
        perror("fork failed");
        exit(EXIT_FAILURE);
    }

    return 0;
}

ss-
